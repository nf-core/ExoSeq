/*
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  container = params.container
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
  maxRetries = 2
  maxErrors = '-1'

  // Process-specific resource requirements
  withName:fastqc {
    time = { check_max( 12.h * task.attempt, 'time' ) } 
  }

  withName:trim_galore {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }

  withName:bwamem {
    cpus = { check_max( 14 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }

  withName:makeBWAIndex{
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withName:makeFastaIndex {
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withName:markDuplicates {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 7 * task.attempt, 'cpus' ) }
    time = 8.h
  }

  withName:recal_bam_files {
    cpus = { check_max( 14 * task.attempt, 'cpus' ) }
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }

  withName:applyBQSR{
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }

  withName:variantCall {
    cpus = { check_max( 14 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

}
